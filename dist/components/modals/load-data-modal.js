"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LoadDataModal = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledLoadDataModal = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.modalPadding;
});

var propTypes = {
  // call backs
  onFileUpload: _propTypes["default"].func.isRequired
};

var LoadDataModal = function LoadDataModal(props) {
  return _react["default"].createElement(StyledLoadDataModal, null, _react["default"].createElement("div", {
    className: "load-data-modal"
  }, _react["default"].createElement(_fileUpload["default"], {
    onFileUpload: props.onFileUpload
  })));
};

exports.LoadDataModal = LoadDataModal;
LoadDataModal.propTypes = propTypes;

var loadDataModalFactory = function loadDataModalFactory() {
  return LoadDataModal;
};

var _default = loadDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL21vZGFscy9sb2FkLWRhdGEtbW9kYWwuanMiXSwibmFtZXMiOlsiU3R5bGVkTG9hZERhdGFNb2RhbCIsInN0eWxlZCIsImRpdiIsInByb3BzIiwidGhlbWUiLCJtb2RhbFBhZGRpbmciLCJwcm9wVHlwZXMiLCJvbkZpbGVVcGxvYWQiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIkxvYWREYXRhTW9kYWwiLCJsb2FkRGF0YU1vZGFsRmFjdG9yeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLG1CQUFtQixHQUFHQyw2QkFBT0MsR0FBVixvQkFDWixVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLFlBQWhCO0FBQUEsQ0FETyxDQUF6Qjs7QUFJQSxJQUFNQyxTQUFTLEdBQUc7QUFDaEI7QUFDQUMsRUFBQUEsWUFBWSxFQUFFQyxzQkFBVUMsSUFBVixDQUFlQztBQUZiLENBQWxCOztBQUtPLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQVIsS0FBSztBQUFBLFNBQ2hDLGdDQUFDLG1CQUFELFFBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQ0UsZ0NBQUMsc0JBQUQ7QUFBWSxJQUFBLFlBQVksRUFBRUEsS0FBSyxDQUFDSTtBQUFoQyxJQURGLENBREYsQ0FEZ0M7QUFBQSxDQUEzQjs7O0FBUVBJLGFBQWEsQ0FBQ0wsU0FBZCxHQUEwQkEsU0FBMUI7O0FBRUEsSUFBTU0sb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QjtBQUFBLFNBQU1ELGFBQU47QUFBQSxDQUE3Qjs7ZUFDZUMsb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgRmlsZVVwbG9hZCBmcm9tICdjb21wb25lbnRzL2NvbW1vbi9maWxlLXVwbG9hZGVyL2ZpbGUtdXBsb2FkJztcblxuY29uc3QgU3R5bGVkTG9hZERhdGFNb2RhbCA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUubW9kYWxQYWRkaW5nfTtcbmA7XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgLy8gY2FsbCBiYWNrc1xuICBvbkZpbGVVcGxvYWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBjb25zdCBMb2FkRGF0YU1vZGFsID0gcHJvcHMgPT4gKFxuICA8U3R5bGVkTG9hZERhdGFNb2RhbD5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWQtZGF0YS1tb2RhbFwiPlxuICAgICAgPEZpbGVVcGxvYWQgb25GaWxlVXBsb2FkPXtwcm9wcy5vbkZpbGVVcGxvYWR9IC8+XG4gICAgPC9kaXY+XG4gIDwvU3R5bGVkTG9hZERhdGFNb2RhbD5cbik7XG5cbkxvYWREYXRhTW9kYWwucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5jb25zdCBsb2FkRGF0YU1vZGFsRmFjdG9yeSA9ICgpID0+IExvYWREYXRhTW9kYWw7XG5leHBvcnQgZGVmYXVsdCBsb2FkRGF0YU1vZGFsRmFjdG9yeTtcbiJdfQ==